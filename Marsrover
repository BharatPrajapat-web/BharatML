import numpy as np
from sklearn.ensemble import RandomForestClassifier

class MarsRoverML:
    def __init__(self, grid_size):
        self.grid_size = grid_size
        self.grid = np.zeros((grid_size, grid_size))
        self.rover_position = [0, 0]

        # Simulated obstacle positions
        self.obstacles = [(2, 2), (4, 5), (6, 3)]
        for obstacle in self.obstacles:
            self.grid[obstacle[0]][obstacle[1]] = 1

        self.classifier = RandomForestClassifier()

    def get_perception(self):
        # Simulate sensor data (e.g., camera feed)
        perception = []

        for i in range(-1, 2):
            for j in range(-1, 2):
                x, y = self.rover_position[0] + i, self.rover_position[1] + j
                if 0 <= x < self.grid_size and 0 <= y < self.grid_size:
                    perception.append(self.grid[x][y])
                else:
                    perception.append(1)  # Assume obstacles at grid boundaries

        return perception

    def train_classifier(self):
        # Simulated training data
        X = []
        y = []

        for i in range(self.grid_size):
            for j in range(self.grid_size):
                X.append(self.get_perception())
                y.append(self.grid[i][j])

        self.classifier.fit(X, y)

    def move(self):
        perception = self.get_perception()
        prediction = self.classifier.predict([perception])[0]

        if prediction == 0:  # No obstacle, move forward
            self.rover_position[1] += 1
        else:  # Obstacle detected, turn randomly (for simplicity)
            if np.random.rand() < 0.5:
                self.rover_position[0] += 1
            else:
                self.rover_position[0] -= 1

        # Ensure the rover stays within the grid
        self.rover_position = np.clip(self.rover_position, 0, self.grid_size - 1)

    def run_mission(self, steps):
        for _ in range(steps):
            self.move()
            print(f"Rover Position: {self.rover_position}")



