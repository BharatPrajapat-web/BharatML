pip install yfinance pandas numpy scikit-learn tensorflow matplotlib
import yfinance as yf
import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense
import matplotlib.pyplot as plt
# Fetch historical data for Apple (AAPL)
symbol = 'AAPL'
start_date = '2020-01-01'
end_date = '2022-01-01'
data = yf.download(symbol, start=start_date, end=end_date)

# Keep only the 'Close' prices
df = pd.DataFrame(data['Close']).reset_index()
# Create lag features (past closing prices)
for i in range(1, 6):  # Using the last 5 days' closing prices
    df[f'Close_Lag_{i}'] = df['Close'].shift(i)

# Drop rows with NaN values
df = df.dropna().reset_index(drop=True)
# Normalize the data
scaler = MinMaxScaler()
df_scaled = scaler.fit_transform(df[['Close'] + [f'Close_Lag_{i}' for i in range(1, 6)]])
# Split the data into training and testing sets
train_size = int(len(df_scaled) * 0.8)
train, test = df_scaled[:train_size], df_scaled[train_size:]

# Function to create sequences for LSTM
def create_sequences(data, seq_length):
    X, y = [], []
    for i in range(len(data) - seq_length):
        X.append(data[i:(i + seq_length), :])
        y.append(data[i + seq_length, 0])
    return np.array(X), np.array(y)

# Choose the sequence length (number of past days to consider)
sequence_length = 5

# Create sequences for training and testing
X_train, y_train = create_sequences(train, sequence_length)
X_test, y_test = create_sequences(test, sequence_length)
model = Sequential()
model.add(LSTM(units=50, activation='relu', input_shape=(X_train.shape[1], X_train.shape[2])))
model.add(Dense(units=1))
model.compile(optimizer='adam', loss='mse')

# Train the model
model.fit(X_train, y_train, epochs=50, batch_size=32, validation_split=0.1)
# Make predictions
y_train_pred = model.predict(X_train)
y_test_pred = model.predict(X_test)

# Inverse transform to get original scale
y_train_pred_orig = scaler.inverse_transform(np.expand_dims(y_train_pred, axis=1)).flatten()
y_test_pred_orig = scaler.inverse_transform(np.expand_dims(y_test_pred, axis=1)).flatten()

# Evaluate the model
print(f"Training MSE: {mean_squared_error(df['Close'][:len(y_train_pred)], y_train_pred_orig)}")
print(f"Testing MSE: {mean_squared_error(df['Close'][len(y_train_pred):], y_test_pred_orig)}")
# Visualize the results
plt.figure(figsize=(10, 6))
plt.plot(df['Close'], label='Actual')
plt.plot(np.arange(sequence_length, len(y_train_pred_orig) + sequence_length), y_train_pred_orig, label='Train Predicted')
plt.plot(np.arange(len(y_train_pred_orig) + sequence_length, len(df['Close'])), y_test_pred_orig, label='Test Predicted')
plt.xlabel('Day')
plt.ylabel('Stock Price')
plt.title('AAPL Stock Price Prediction with LSTM')
plt.legend()
plt.show()
